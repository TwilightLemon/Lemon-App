<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:av="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:base="clr-namespace:LemonApp.Common.UIBases"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ws="https://schemas.elecho.dev/wpfsuite"
                    mc:Ignorable="av">

    <!--#region ScrollViewer 模板-->
    <ControlTemplate x:Key="ScrollViewerControlTemplate" TargetType="{x:Type base:ScrollViewer}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="OnMouseEnter1">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="OnMouseLeave1">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard x:Name="OnMouseLeave1_BeginStoryboard" Storyboard="{StaticResource OnMouseLeave1}" />
            </EventTrigger>
        </ControlTemplate.Triggers>
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner"
                       Grid.Row="1"
                       Grid.Column="1"
                       Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Grid.ColumnSpan="2"
                                    Margin="{TemplateBinding Padding}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False"
                                    CanVerticallyScroll="False"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Grid.Row="0"
                       Grid.Column="1"
                       Width="10"
                       MinWidth="0"
                       Margin="0,0,2,0"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Cursor="Arrow"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Minimum="0"
                       Opacity="0"
                       Style="{DynamicResource ScrollBarStyle}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Grid.Row="1"
                       Grid.Column="0"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Cursor="Arrow"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Minimum="0"
                       Orientation="Horizontal"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"
                               Fill="{DynamicResource ForeColor}"
                               Opacity="0.6"
                               RadiusX="5"
                               RadiusY="5"
                               SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0*" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            <RowDefinition Height="448*" />
                            <RowDefinition Height="17*" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Background="#00000000" />
                        <RepeatButton x:Name="PART_LineUpButton"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Visibility="Collapsed" />
                        <Track x:Name="PART_Track"
                               Grid.Row="1"
                               Width="Auto"
                               IsDirectionReversed="true"
                               IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Visibility="Collapsed" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Visibility="Collapsed" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton"
                                      Grid.Row="2"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Visibility="Collapsed" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <Style x:Key="IconToggleButton" TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="bd"
                            Padding="{TemplateBinding Padding}"
                            Background="Transparent"
                            CornerRadius="4">
                        <Path x:Name="path"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{TemplateBinding Tag}"
                              Fill="{DynamicResource ForeColor}"
                              Stretch="Uniform" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource ForeColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource HighlightThemeColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="Background" Value="{DynamicResource MaskColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="bd" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleVerticalScrollViewerStyle" TargetType="{x:Type base:ScrollViewer}">
        <Setter Property="ws:StylusTouchDevice.Simulate" Value="True" />
        <Setter Property="PanningMode" Value="VerticalOnly" />
        <Setter Property="Template" Value="{StaticResource ScrollViewerControlTemplate}" />
    </Style>
    <Style x:Key="AccentToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template" Value="{DynamicResource AccentToggleButtonTemplate}" />
    </Style>
    <ControlTemplate x:Key="AccentToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="border"
                Background="{DynamicResource HighlightThemeColor}"
                BorderBrush="{DynamicResource BorderColor}"
                CornerRadius="8">
            <ContentPresenter x:Name="contentPresenter"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Focusable="False"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="border" Property="Background" Value="{DynamicResource MaskColor}" />
                <Setter TargetName="border" Property="BorderThickness" Value="1" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource ForeColor}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="Background" Value="{DynamicResource HighlightThemeColor}" />
                <Setter TargetName="border" Property="BorderThickness" Value="0" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource BackgroundColor}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="checkedTab"
                                Height="4"
                                Margin="4,0"
                                VerticalAlignment="Bottom"
                                Background="{DynamicResource HighlightThemeColor}"
                                CornerRadius="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource HighlightThemeColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource ForeColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource HighlightThemeColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="checkedTab" Property="Visibility" Value="Visible" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource HighlightThemeColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="checkedTab" Property="Visibility" Value="Collapsed" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource ForeColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RoundToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecked">
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="26,0,0,0">
                                    <EasingThicknessKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut" />
                                    </EasingThicknessKeyFrame.EasingFunction>
                                </EasingThicknessKeyFrame>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecked">
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="6,0,0,0">
                                    <EasingThicknessKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut" />
                                    </EasingThicknessKeyFrame.EasingFunction>
                                </EasingThicknessKeyFrame>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="border"
                                Width="48"
                                Height="24"
                                Margin="0,0,20,0"
                                HorizontalAlignment="Right"
                                Background="Transparent"
                                BorderBrush="{DynamicResource FocusMaskColor}"
                                BorderThickness="1"
                                CornerRadius="12">
                            <Ellipse x:Name="ellipse"
                                     Width="16"
                                     Height="16"
                                     Margin="4,0,0,0"
                                     HorizontalAlignment="Left"
                                     Fill="{DynamicResource ForeColor}"
                                     Opacity="0.8" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ToggleButton.Checked">
                            <BeginStoryboard Storyboard="{StaticResource OnChecked}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                            <BeginStoryboard Storyboard="{StaticResource OnUnchecked}" />
                        </EventTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource HighlightThemeColor}" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter TargetName="ellipse" Property="Fill" Value="{DynamicResource BackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleListBoxStyle" TargetType="{x:Type ws:ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            Padding="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <base:ScrollViewer Padding="{TemplateBinding Padding}"
                                           Focusable="false"
                                           Style="{StaticResource SimpleVerticalScrollViewerStyle}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </base:ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DisplayListBoxStyle" TargetType="{x:Type ws:ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ws:ListBox}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                                Width="16"
                                Height="16"
                                Margin="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Margin="1"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="{DynamicResource ForeColor}"
                                      Opacity="0"
                                      Stretch="None" />
                                <Rectangle x:Name="indeterminateMark"
                                           Margin="2"
                                           Fill="{DynamicResource ForeColor}"
                                           Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource FocusMaskColor}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource ForeColor}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource ForeColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource FocusMaskColor}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource ForeColor}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource ForeColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="10,10,10,10"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Margin="8,0,0,0"
                                      VerticalAlignment="Center"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SimpleTextBoxStyleForWs" TargetType="{x:Type ws:TextBox}">
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}" />
        <Setter Property="FocusedBorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="HoverBorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="CornerRadius" Value="10" />
    </Style>
    <Style x:Key="SimplePasswordBoxStyleForWs" TargetType="{x:Type ws:PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="10" />
    </Style>
    <Style x:Key="SimpleListBoxItemStyle" TargetType="{x:Type ws:ListBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="5,2" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="HoverBackground" Value="{DynamicResource MaskColor}" />
        <Setter Property="SelectedBackground" Value="{DynamicResource MaskColor}" />
        <Setter Property="SelectedActiveBackground" Value="{DynamicResource MaskColor}" />
    </Style>
    <Style x:Key="AccentButtonStyleForWs" TargetType="{x:Type ws:Button}">
        <Setter Property="Foreground" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Background" Value="{DynamicResource HighlightThemeColor}" />
        <Setter Property="HoverBackground" Value="{DynamicResource FocusAccentColor}" />
        <Setter Property="PressedBackground" Value="{DynamicResource FocusAccentColor}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <Style x:Key="SimpleButtonStyleForWs" TargetType="{x:Type ws:Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="HoverBackground" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="PressedBackground" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}" />
        <Setter Property="HoverBorderBrush" Value="{DynamicResource BorderColor}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource BorderColor}" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <Style x:Key="SimpleIconButtonStyleForWs" TargetType="{x:Type ws:Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HoverBackground" Value="{DynamicResource MaskColor}" />
        <Setter Property="PressedBackground" Value="{DynamicResource MaskColor}" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <Style x:Key="SimpleComboBoxStyleForWs" TargetType="{x:Type ws:ComboBox}">
        <Setter Property="Background" Value="{DynamicResource MaskColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="GlyphBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="PopupBackground" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="CornerRadius" Value="4,4,4,4" />
        <Setter Property="PopupCornerRadius" Value="4,4,4,4" />
        <Setter Property="HoverBackground" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="HoverBorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="HoverGlyphBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="HoverForeground" Value="{DynamicResource ForeColor}" />
        <Setter Property="PressedBackground" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource FocusMaskColor}" />
        <Setter Property="PressedGlyphBrush" Value="{DynamicResource ForeColor}" />
        <Setter Property="PressedForeground" Value="{DynamicResource ForeColor}" />
    </Style>

    <FontFamily x:Key="SegoeFluentIcon">
        pack://application:,,,/LemonApp.Common;component/Resources/Segoe Fluent Icons.ttf#Segoe Fluent Icons
    </FontFamily>
    <FontFamily x:Key="DefaultFontFamily">
        .PingFang SC,Segoe UI
    </FontFamily>
    <FontFamily x:Key="LyricFont">
        Georgia,STZhongsong
    </FontFamily>
    <Style x:Key="FluentWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForeColor}" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                        <Grid Height="48" VerticalAlignment="Top">
                            <ws:Button x:Name="CloseBtn"
                                       Width="48"
                                       Height="48"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Top"
                                       Background="Transparent"
                                       BorderThickness="0"
                                       Content="&#xE8BB;"
                                       Cursor="Hand"
                                       FontFamily="{StaticResource SegoeFluentIcon}"
                                       FontSize="10"
                                       Foreground="{DynamicResource ForeColor}"
                                       HoverBackground="#FFE32820"
                                       PressedBackground="#FFEF1E15"
                                       WindowChrome.IsHitTestVisibleInChrome="True" />
                            <ws:Button x:Name="MaxmizeBtn"
                                       Width="48"
                                       Height="48"
                                       Margin="0,0,48,0"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Top"
                                       ws:WindowOption.IsMaximumButton="True"
                                       Background="Transparent"
                                       BorderThickness="0"
                                       Cursor="Hand"
                                       DisabledBackground="Transparent"
                                       DisabledForeground="{DynamicResource FocusMaskColor}"
                                       FontFamily="{StaticResource SegoeFluentIcon}"
                                       FontSize="10"
                                       Foreground="{DynamicResource ForeColor}"
                                       HoverBackground="{DynamicResource MaskColor}"
                                       PressedBackground="{DynamicResource FocusMaskColor}"
                                       WindowChrome.IsHitTestVisibleInChrome="True">
                                <ws:ConditionalControl Condition="{TemplateBinding WindowState, Converter={x:Static ws:NotEqualConverter.Instance}, ConverterParameter={x:Static WindowState.Maximized}}">
                                    <ws:ConditionalControl.ContentWhenTrue>
                                        <TextBlock Text="&#xE922;" />
                                    </ws:ConditionalControl.ContentWhenTrue>
                                    <ws:ConditionalControl.ContentWhenFalse>
                                        <TextBlock Text="&#xE923;" />
                                    </ws:ConditionalControl.ContentWhenFalse>
                                </ws:ConditionalControl>
                            </ws:Button>
                            <ws:Button x:Name="MinimizeBtn"
                                       Width="48"
                                       Height="48"
                                       Margin="0,0,96,0"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Top"
                                       Background="Transparent"
                                       BorderThickness="0"
                                       Content="&#xE921;"
                                       Cursor="Hand"
                                       FontFamily="{StaticResource SegoeFluentIcon}"
                                       FontSize="10"
                                       Foreground="{DynamicResource ForeColor}"
                                       HoverBackground="{DynamicResource MaskColor}"
                                       PressedBackground="{DynamicResource FocusMaskColor}"
                                       WindowChrome.IsHitTestVisibleInChrome="True" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Slider右侧  -->
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  滑块Thumb  -->
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Border Width="20"
                Height="20"
                BorderBrush="{DynamicResource BorderColor}"
                BorderThickness="1"
                CornerRadius="10"
                SnapsToDevicePixels="True">
            <Border x:Name="border"
                    Background="{DynamicResource HighlightThemeColor}"
                    BorderBrush="{DynamicResource ButtonPureColor}"
                    BorderThickness="4"
                    CornerRadius="10"
                    SnapsToDevicePixels="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="border"
                                                Storyboard.TargetProperty="BorderThickness"
                                                To="6"
                                                Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="border"
                                                Storyboard.TargetProperty="BorderThickness"
                                                To="4"
                                                Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false" />
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--  Slider左侧高亮  -->
    <Style x:Key="SliderLeftStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Border Height="4"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2 0 0 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick"
                         Grid.Row="0"
                         Height="4"
                         Margin="0,0,0,2"
                         Fill="{TemplateBinding Foreground}"
                         Placement="Top"
                         Visibility="Collapsed" />
                <TickBar x:Name="BottomTick"
                         Grid.Row="2"
                         Height="4"
                         Margin="0,2,0,0"
                         Fill="{TemplateBinding Foreground}"
                         Placement="Bottom"
                         Visibility="Collapsed" />
                <Border x:Name="TrackBackground"
                        Grid.Row="1"
                        Height="4.0"
                        Margin="5,0"
                        VerticalAlignment="center"
                        Background="{DynamicResource FocusMaskColor}"
                        CornerRadius="2" />
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Margin="0,0,-2,0"
                                      Background="{DynamicResource HighlightThemeColor}"
                                      Command="{x:Static Slider.DecreaseLarge}"
                                      Style="{StaticResource SliderLeftStyle}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                               Width="20"
                               Height="20"
                               VerticalAlignment="Center"
                               Focusable="False"
                               OverridesDefaultStyle="True"
                               Template="{StaticResource SliderThumbHorizontalDefault}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TrackBackground" Property="Margin" Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TrackBackground" Property="Margin" Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true" />
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter TargetName="Thumb" Property="Foreground" Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="FluentSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
    </Style>
</ResourceDictionary>